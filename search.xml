<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我收藏的宝藏文档</title>
      <link href="/2021/01/26/doc/favor/"/>
      <url>/2021/01/26/doc/favor/</url>
      
        <content type="html"><![CDATA[<h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p><a href="https://www.cnblogs.com/Hijack-you/p/13057792.html" target="_blank" rel="noopener">epoll原理</a><br><a href="https://blog.csdn.net/qq_36654629/article/details/112629783" target="_blank" rel="noopener">零拷贝csdn</a><br><a href="https://www.cnblogs.com/xiaolincoding/p/13719610.html" target="_blank" rel="noopener">零拷贝cnblog</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/01/26/hello-world/"/>
      <url>/2021/01/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>概率与统计的基本概念与理解</title>
      <link href="/2019/10/26/Math/%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A1/1.basic/"/>
      <url>/2019/10/26/Math/%E6%A6%82%E7%8E%87%E4%B8%8E%E7%BB%9F%E8%AE%A1/1.basic/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念理解"><a href="#基本概念理解" class="headerlink" title="基本概念理解"></a>基本概念理解</h2><h3 id="1-随机变量-random-variable"><a href="#1-随机变量-random-variable" class="headerlink" title="1. 随机变量 random variable"></a>1. 随机变量 random variable</h3><blockquote><p>我们用随机变量（Random Variable）来描述事件所有可能出现的状态，并使用概率分布（Probability Distribution）来描述每个状态出现的可能性。而随机变量又可以分为离散型随机变量（Discrete Random Variable）和连续型随机变量（Continuous Random Variable）。</p></blockquote><h4 id="1-1-离散型随机变量-Discrete-Random-Variable"><a href="#1-1-离散型随机变量-Discrete-Random-Variable" class="headerlink" title="1.1 离散型随机变量 Discrete Random Variable"></a>1.1 离散型随机变量 Discrete Random Variable</h4><p>如：抛硬币的结果（正面朝上）（正面朝下）、一个程序员每天掉多少根头发（0）（1）（…）(100)</p><h4 id="1-2-连续型随机变量-Continuous-Random-Variable"><a href="#1-2-连续型随机变量-Continuous-Random-Variable" class="headerlink" title="1.2 连续型随机变量 Continuous Random Variable"></a>1.2 连续型随机变量 Continuous Random Variable</h4><p>如：一个人的体重是多少</p><h3 id="2-概率分布"><a href="#2-概率分布" class="headerlink" title="2. 概率分布"></a>2. 概率分布</h3><blockquote><p>概率分布，是指<code>用于表述随机变量取值的概率规律</code>。事件的概率表示了一次试验中某一个结果发生的可能性大小。若要全面了解试验，则必须知道试验的<code>全部可能结果及各种可能结果发生的概率</code>，即随机试验的概率分布。如果试验结果用变量X的取值来表示，则随机试验的概率分布就是随机变量的概率分布，即随机变量的可能取值及取得对应值的概率。根据随机变量所属类型的不同，概率分布取不同的表现形式。</p></blockquote><p>如：抛硬币的结果（正面 50%）（反面 50%）</p><h3 id="3-联合概率-Joint-Probability"><a href="#3-联合概率-Joint-Probability" class="headerlink" title="3. 联合概率 Joint Probability"></a>3. 联合概率 Joint Probability</h3><blockquote><p>联合概率，是指在多元的概率分布中<code>多个随机变量分别满足各自条件的概率</code>。假设X和Y都服从正态分布，那么$P(X&lt;4,Y&lt;0)$就是一个联合概率，表示$X&lt;4,Y&lt;0$两个条件同时成立的概率。表示两个事件共同发生的概率。A与B的联合概率表示为$P(AB)$或者$P(A,B)$,或者$P(A∩B)$</p></blockquote><p>如：</p><pre><code>X -&gt; 今天是否下雨Y -&gt; 今天喜欢的女孩子会不会带伞</code></pre><h3 id="4-边缘概率-Marginal-Probability"><a href="#4-边缘概率-Marginal-Probability" class="headerlink" title="4. 边缘概率 Marginal Probability"></a>4. 边缘概率 Marginal Probability</h3><p>对于 $P(X, Y)$, $P(X)=\sum_{y}P(X, Y)=\sum_{y}P(X|Y)P(Y)$</p><blockquote><p>在这个边缘分布中，我们得到只关于一个变量的概率分布，而<code>不再考虑另一变量的影响</code>，实际上进行了<code>降维</code>操作。</p></blockquote><p>对于离散型随机变量，通过联合概率 $P(x, y)$ 在 $y$ 上<code>求和</code>，就可以得到 $P(x)$，这个 $P(x)$ 就是边缘概率。对于连续型随机变量，我们可以通过联合概率 $P(x, y)$ 在 $y$ 上的<code>积分</code>，推导出边缘概率 $P(x)$</p><h3 id="5-条件概率"><a href="#5-条件概率" class="headerlink" title="5. 条件概率"></a>5. 条件概率</h3><blockquote><p><code>条件概率是指事件 A 在另外一个事件 B 已经发生条件下的发生概率</code>。条件概率表示为：$P(A|B)$，读作“<code>在B的条件下A的概率</code>”。$P(A|B) = \frac{P(AB)}{P(B)}$</p></blockquote><h3 id="6-数学期望"><a href="#6-数学期望" class="headerlink" title="6. 数学期望"></a>6. 数学期望</h3><blockquote><p>在概率论和统计学中，<code>一个离散性随机变量的期望值是试验中每次可能的结果乘以其结果概率的总和</code>$E(x)$。换句话说，期望值像是随机试验在同样的机会下重复多次，所有那些可能状态平均的结果，便基本上等同“期望值”所期望的数。期望值可能与每一个结果都不相等。换句话说，期望值是该变量输出值的加权平均。</p></blockquote><h3 id="7-概率三角关系-联合概率、条件概率、边缘概率"><a href="#7-概率三角关系-联合概率、条件概率、边缘概率" class="headerlink" title="7. 概率三角关系(联合概率、条件概率、边缘概率)"></a>7. 概率三角关系(联合概率、条件概率、边缘概率)</h3><blockquote><p>简单的说，<code>联合概率</code>是<code>条件概率</code>和<code>边缘概率</code>的乘积，也就是条件概率的定义式</p></blockquote><p>采用通用的公式来表达就是：$$P(XY) = P(X|Y)P(Y)$$<br>或者：$$P(YX) = P(Y|X)P(X)$$</p><h3 id="8-贝叶斯定理"><a href="#8-贝叶斯定理" class="headerlink" title="8. 贝叶斯定理"></a>8. 贝叶斯定理</h3><p>通过概率三角关系的两个定义式，可以推导出：<br>$$P(X|Y)P(Y)=P(Y|X)P(X)$$<br>$$P(X|Y) = \frac{P(Y|X)P(X)}{P(Y)}$$</p><blockquote><p>$P(X|Y)$ 是根据贝叶斯定理，通过<code>先验概率</code> $P(X)$、<code>似然函数</code> $P(Y|X)$ 和<code>边缘概率</code> $P(Y)$ 推算而来，因此我们把它称作<code>后验概率</code></p></blockquote><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>随机变量 X 为：一个人说的话为真(T)、为假(F)<br>随机变量 Y 为：测谎仪判定为真话(T)、假话(F)  </p><p>已知：$P(Y=T|X=T)=0.95, P(Y=F|X=F)=0.99$ 也就是说当一个人说假话时，有 0.99 的概率测谎仪会识别为假话，当一个人说真话时，测谎仪有 0.95 的概率会识别为真话  </p><p>现在有一个人，说假话的概率 $P(X=F)=0.001$ 可以说非常低了，但测谎仪说这个人在说假话，那么测谎仪怎么判断测谎仪是否做出了正确的判断？</p><p>定义事件：$X=T|Y=F$ 即虽然测谎仪已经识别为假，但这个人实际上说了真话  </p><p>先验概率：$$P(Y=F)=P(Y=F|X=T)P(X=T)+P(Y=F|X=F)P(X=F)=0.05\times0.999+0.99\times0.001=0.051$$</p><p>进行一个小转换后利用贝叶斯定理：</p><p>$$P(X=T|Y=F)=1-P(X=F|Y=F)=1-\frac {P(Y=F|X=F)P(X=F)}{P(Y=F)}=1-0.019=0.981$$</p><p>说明测谎仪的结果很可能是错误的，为什么会这么反直觉？根本原因在于 $P(X=F)=0.001$ 是反直觉的，如果 $P(X=F)=0.5$, 测谎仪的准确度就是正常的</p><p>先验概率：$$P(Y=F)=P(Y=F|X=T)P(X=T)+P(Y=F|X=F)P(X=F)=0.05\times0.5+0.99\times0.5=0.52$$</p><p>进行一个小转换后利用贝叶斯定理：</p><p>$$P(X=T|Y=F)=1-P(X=F|Y=F)=1-\frac {P(Y=F|X=F)P(X=F)}{P(Y=F)}=1-0.952=0.05$$</p><p>这不就好多了嘛:)</p><h3 id="9-随机变量的独立性"><a href="#9-随机变量的独立性" class="headerlink" title="9. 随机变量的独立性"></a>9. 随机变量的独立性</h3><p>对于相互独立的 X, Y, 有<br>$$P(X|Y)=P(X), P(Y|X)=P(Y)$$<br>$$P(X,Y)=P(X|Y)P(Y)=P(X)P(Y)$$</p><h2 id="朴素贝叶斯模型及应用"><a href="#朴素贝叶斯模型及应用" class="headerlink" title="朴素贝叶斯模型及应用"></a>朴素贝叶斯模型及应用</h2><blockquote><p>贝叶斯定理的核心思想：用<code>先验概率</code>和<code>条件概率</code>估计<code>后验概率</code>，朴素贝叶斯(Naive Bayesian) 即在贝叶斯定理的基础上，强调不同属性之间的完全独立性</p></blockquote><h2 id="常见的分布模型"><a href="#常见的分布模型" class="headerlink" title="常见的分布模型"></a>常见的分布模型</h2><h3 id="1-离散型分布"><a href="#1-离散型分布" class="headerlink" title="1. 离散型分布"></a>1. 离散型分布</h3><h4 id="1-1-伯努利分布-Bernoulli-Distribution"><a href="#1-1-伯努利分布-Bernoulli-Distribution" class="headerlink" title="1.1 伯努利分布 Bernoulli Distribution"></a>1.1 伯努利分布 Bernoulli Distribution</h4><blockquote><p>这是单个随机变量 x 的分布，而且这个变量 x 的取值只有两个，0 或 1。伯努利分布通过参数 λ 来控制这个变量为 1 的概率</p></blockquote><p>$P(X) = \lambda^x(1-\lambda)^{1-x}$ </p><h4 id="1-2-分类分布-Categorical-Distribution"><a href="#1-2-分类分布-Categorical-Distribution" class="headerlink" title="1.2 分类分布 Categorical Distribution"></a>1.2 分类分布 Categorical Distribution</h4><blockquote><p>它描述了一个具有 k 个不同状态的单个随机变量。这里的 k 是有限的数值，如果 k 为 2 的时候，那么分类分布就变成了伯努利分布</p></blockquote><p>$P(X=k) = \lambda_k$</p><h4 id="1-3-二项分布"><a href="#1-3-二项分布" class="headerlink" title="1.3 二项分布"></a>1.3 二项分布</h4><p>略</p><h4 id="1-4-泊松分布"><a href="#1-4-泊松分布" class="headerlink" title="1.4 泊松分布"></a>1.4 泊松分布</h4><p>略</p><h3 id="2-连续型分布"><a href="#2-连续型分布" class="headerlink" title="2. 连续型分布"></a>2. 连续型分布</h3><h4 id="2-1-正态分布-Normal-Distribution"><a href="#2-1-正态分布-Normal-Distribution" class="headerlink" title="2.1 正态分布 Normal Distribution"></a>2.1 正态分布 Normal Distribution</h4><blockquote><p>也叫高斯分布（Gaussian Distribution），这个分布可以近似表示日常生活中很多数据的分布，我们经常使用它进行机器学习的特征工程，对原始数据<code>实施标准化</code>，使得不同范围的数据具有可比性。</p></blockquote><p>$P(X) = \frac {1}{\sqrt{2\pi\sigma^2}}exp(-\frac {(x-\mu)^2}{2\sigma^2})$</p><p>其中 $\mu$ 是均值 $\sigma$ 是方差</p><p>###</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Go 改写图书馆抢座位脚本，并部署到服务器</title>
      <link href="/2019/10/23/Daily/2019-10/23(%E5%9B%BE%E4%B9%A6%E9%A6%86%E6%8A%A2%E5%BA%A7%E4%BD%8D)/"/>
      <url>/2019/10/23/Daily/2019-10/23(%E5%9B%BE%E4%B9%A6%E9%A6%86%E6%8A%A2%E5%BA%A7%E4%BD%8D)/</url>
      
        <content type="html"><![CDATA[<h2 id="关于信图的抢座位大战"><a href="#关于信图的抢座位大战" class="headerlink" title="关于信图的抢座位大战"></a>关于信图的抢座位大战</h2><p>上半年的时候，我用 python 写了一个抢座位的脚本，尝试着部署服务器但失败了。</p><p>为什么呢？当时我以为是因为利昂做了 ip 限制，只有学校附近的 ip 才能抢。</p><p>后来我去无锡实习，发现照样能登录，事情就有点搞笑了。</p><p>哪来的 ip 限制呢？</p><p>十月份回来后，我直接用 mac 的定时任务完成了抢座位，不过很麻烦，每天 10:45 的时候都要打开电脑。</p><p>到了今天，我忍不了了，势必要把这个脚本部署到服务器。</p><h2 id="莫名其妙的-python"><a href="#莫名其妙的-python" class="headerlink" title="莫名其妙的 python"></a>莫名其妙的 python</h2><p>一开始，我直接把 python 脚本放到服务器上执行，出现了一个 ssl error.</p><p>好吧，我把 https 全部改成 http，发现好像本地执行是没问题的。</p><p>一部署到服务器，又不行了…</p><p>可恶的 python, 我受不了了，直接用 golang 重写。</p><p>一写就是一天，还好 golang 编译出来的在服务器上运行得很完美。</p><p>终于不用在傻乎乎地每天守在电脑前了…</p><h2 id="crontab-定时任务"><a href="#crontab-定时任务" class="headerlink" title="crontab 定时任务"></a>crontab 定时任务</h2><pre><code>crontab -lcrontab -e# 我的脚本# m h  dom mon dow   command45 22 * * * /home/whulib &gt;&gt; /home/log30 11 * * * /home/whulib &gt;&gt; /home/log</code></pre><h2 id="用-gomail-发送预约结果"><a href="#用-gomail-发送预约结果" class="headerlink" title="用 gomail 发送预约结果"></a>用 gomail 发送预约结果</h2><p>用普通的 qq 邮箱好像不大行，需要使用企业邮箱</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> util<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/go-gomail/gomail"</span>    <span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">type</span> EmailParam <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ServerHost 邮箱服务器地址，如腾讯企业邮箱为smtp.exmail.qq.com</span>    ServerHost <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// ServerPort 邮箱服务器端口，如腾讯企业邮箱为465</span>    ServerPort <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// FromEmail　发件人邮箱地址</span>    FromEmail <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// FromPass 发件人邮箱密码（注意，这里是明文形式）</span>    FromPass <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// Toes 接收者邮件，如有多个，则以英文逗号(“,”)隔开，不能为空</span>    Toes <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// CCers 抄送者邮件，如有多个，则以英文逗号(“,”)隔开，可以为空</span>    CCers <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 主题</span>    Subject <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 正文 text/html</span>    Body <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// SendEmail body支持html格式字符串</span><span class="token keyword">func</span> <span class="token function">SendEmail</span><span class="token punctuation">(</span>ep <span class="token operator">*</span>EmailParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ep<span class="token punctuation">.</span>Toes<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> tos <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tmp <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>ep<span class="token punctuation">.</span>Toes<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tos <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tos<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    msg <span class="token operator">:=</span> gomail<span class="token punctuation">.</span><span class="token function">NewMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 收件人可以有多个，故用此方式</span>    msg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"To"</span><span class="token punctuation">,</span> tos<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//抄送列表</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ep<span class="token punctuation">.</span>CCers<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tmp <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>ep<span class="token punctuation">.</span>CCers<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tos <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tos<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        msg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Cc"</span><span class="token punctuation">,</span> tos<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 发件人</span>    <span class="token comment" spellcheck="true">// 第三个参数为发件人别名，如"李大锤"，可以为空（此时则为邮箱名称）</span>    msg<span class="token punctuation">.</span><span class="token function">SetAddressHeader</span><span class="token punctuation">(</span><span class="token string">"From"</span><span class="token punctuation">,</span> ep<span class="token punctuation">.</span>FromEmail<span class="token punctuation">,</span> <span class="token string">"bellman"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 主题</span>    msg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Subject"</span><span class="token punctuation">,</span> ep<span class="token punctuation">.</span>Subject<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 正文</span>    msg<span class="token punctuation">.</span><span class="token function">SetBody</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">,</span> ep<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    d <span class="token operator">:=</span> gomail<span class="token punctuation">.</span><span class="token function">NewDialer</span><span class="token punctuation">(</span>ep<span class="token punctuation">.</span>ServerHost<span class="token punctuation">,</span> ep<span class="token punctuation">.</span>ServerPort<span class="token punctuation">,</span> ep<span class="token punctuation">.</span>FromEmail<span class="token punctuation">,</span> ep<span class="token punctuation">.</span>FromPass<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 发送</span>    err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">DialAndSend</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> daily </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>减肥日记</title>
      <link href="/2019/10/22/Daily/2019-10/22(%E5%87%8F%E8%82%A5%E6%97%A5%E8%AE%B0)/"/>
      <url>/2019/10/22/Daily/2019-10/22(%E5%87%8F%E8%82%A5%E6%97%A5%E8%AE%B0)/</url>
      
        <content type="html"><![CDATA[<p>体脂秤显示我的基础代谢为 1500<br>目前控制每日吃进去 1600<br>每天如果不下雨，就跑步，大概能消耗 350 左右<br>希望能瘦下来叭…</p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【合集 router】</title>
      <link href="/2019/10/22/Go/syncd/readme/"/>
      <url>/2019/10/22/Go/syncd/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>Github: <a href="https://github.com/dreamans/syncd">https://github.com/dreamans/syncd</a></p><p>Gitee: <a href="https://gitee.com/dreamans/syncd" target="_blank" rel="noopener">https://gitee.com/dreamans/syncd</a></p><h2 id="学习笔记-router"><a href="#学习笔记-router" class="headerlink" title="学习笔记 router"></a>学习笔记 router</h2><p><a href="https://beileng1998.github.io/2019/10/19/Go/syncd/dockerfile/" target="_blank" rel="noopener">Dockerfile 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/19/Go/syncd/makefile/" target="_blank" rel="noopener">Makefile 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/20/Go/syncd/build/" target="_blank" rel="noopener">build 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/20/Go/syncd/config/" target="_blank" rel="noopener">config 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/21/Go/syncd/db/" target="_blank" rel="noopener">gorm-&gt;mysql 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/21/Go/syncd/deploy/" target="_blank" rel="noopener">deploy 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/22/Go/syncd/model/" target="_blank" rel="noopener">model 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/22/Go/syncd/render/" target="_blank" rel="noopener">render 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/22/Go/syncd/install/" target="_blank" rel="noopener">install 学习笔记</a></p><p><a href="https://beileng1998.github.io/2019/10/22/Go/syncd/mail/" target="_blank" rel="noopener">mail 学习笔记</a></p><h2 id="项目结构说明"><a href="#项目结构说明" class="headerlink" title="项目结构说明"></a>项目结构说明</h2><pre><code>.├── Dockerfile  // 使用 docker 运行当前项目【学习编写 dockerfile】├── Makefile    // make 编译文件【学习如何打包和编写 makefile】├── build       // go 语言编写打包工具【学习定义并实现通用打包模块】│   ├── build.go│   ├── build_test.go│   ├── repo.go│   └── task.go├── config.go   // 配置文件的描述 struct 【学习如何规范读写配置文件】├── db.go       // 数据库统一连接工具库 【学习如何使用 gorm 连接 mysql】├── deploy      // 抽象化的部署工具 【学习如何描述通用部署结构】│   ├── deploy.go│   ├── server.go│   └── task.go├── go.mod├── go.sum├── model       // 框架的数据模型与数据库交互 【学习如何设计模型与优雅使用 gorm 进行 crud】│   ├── deploy_apply.go│   ├── deploy_build.go│   ├── deploy_task.go│   ├── model.go│   ├── project.go│   ├── project_member.go│   ├── project_space.go│   ├── server.go│   ├── server_group.go│   ├── user.go│   ├── user_role.go│   └── user_token.go├── module      // 框架的几个核心功能模块│   ├── deploy│   │   ├── apply.go│   │   ├── build.go│   │   └── deploy.go│   ├── project│   │   ├── member.go│   │   ├── project.go│   │   └── space.go│   ├── server│   │   ├── group.go│   │   └── server.go│   └── user│       ├── login.go│       ├── priv.go│       ├── role.go│       ├── token.go│       └── user.go├── public      // 打包好的静态前端文件│   ├── css│   ├── favicon.ico│   ├── fonts│   ├── img│   ├── index.html│   └── js├── render      // 统一的渲染函数接口【学习规范 response】│   └── render.go├── resource    // 主要放了项目的数据库初始化 sql│   └── sql│       └── syncd_v2.0.0.sql├── router      // 项目路由│   ├── common│   │   ├── hook.go│   │   └── inspace.go│   ├── deploy│   │   ├── apply.go│   │   ├── build.go│   │   ├── deploy.go│   │   └── mail.go│   ├── middleware│   │   └── api_priv.go│   ├── project│   │   ├── member.go│   │   ├── project.go│   │   └── space.go│   ├── route│   │   ├── api│   │   │   └── api.go│   │   └── route.go│   ├── server│   │   ├── group.go│   │   └── server.go│   └── user│       ├── login.go│       ├── my.go│       ├── role.go│       └── user.go├── script      // 直接自动安装可执行文件的脚本【学习如何写 shell 脚本】│   └── install.sh├── sendmail.go // 发送邮件 【学习如何用 go 发送邮件】├── syncd       // 项目入口文件【学习如何编写 gin 框架入口文件】│   └── main.go├── syncd.go    // 一些入口文件需要用到的函数├── syncd.ini   // 配置文件├── util        // 工具库【学习如何完成各个功能独立的 util】│   ├── command│   │   ├── command.go│   │   ├── command_test.go│   │   ├── task.go│   │   └── task_test.go│   ├── goaes│   │   └── aes.go│   ├── gofile│   │   └── file.go│   ├── gois│   │   └── is.go│   ├── golog│   │   ├── file.go│   │   └── log.go│   ├── gopath│   │   └── path.go│   ├── goslice│   │   └── slice.go│   └── gostring│       └── string.go└── web</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【util】</title>
      <link href="/2019/10/22/Go/syncd/util/"/>
      <url>/2019/10/22/Go/syncd/util/</url>
      
        <content type="html"><![CDATA[<p>学习 syncd 的工具箱怎么实现~</p><h2 id="如何用-go-执行一个-cmd"><a href="#如何用-go-执行一个-cmd" class="headerlink" title="如何用 go 执行一个 cmd"></a>如何用 go 执行一个 cmd</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Copyright 2018 syncd Author. All Rights Reserved.</span><span class="token comment" spellcheck="true">// Use of this source code is governed by a MIT-style</span><span class="token comment" spellcheck="true">// license that can be found in the LICENSE file.</span><span class="token keyword">package</span> command<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"errors"</span>    <span class="token string">"fmt"</span>    <span class="token string">"os/exec"</span>    <span class="token string">"strings"</span>    <span class="token string">"syscall"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    DEFAULT_RUM_TIMEOUT <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 一个完整的 cmd 描述</span><span class="token keyword">type</span> Command <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Cmd             <span class="token builtin">string</span>    Timeout         time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// 这个是一个无缓冲 chan, 用来在任意时刻终止 cmd</span>    TerminateChan   <span class="token keyword">chan</span> <span class="token builtin">int</span>    Setpgid         <span class="token builtin">bool</span>    command         <span class="token operator">*</span>exec<span class="token punctuation">.</span>Cmd    <span class="token comment" spellcheck="true">// 通过 buffer 来进行输出</span>    stdout          bytes<span class="token punctuation">.</span>Buffer    stderr          bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewCmd</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Command<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>Timeout <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>Timeout <span class="token operator">=</span> DEFAULT_RUM_TIMEOUT <span class="token operator">*</span> time<span class="token punctuation">.</span>Second    <span class="token punctuation">}</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>TerminateChan <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>TerminateChan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Cmd<span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>Setpgid <span class="token punctuation">{</span>        cmd<span class="token punctuation">.</span>SysProcAttr <span class="token operator">=</span> <span class="token operator">&amp;</span>syscall<span class="token punctuation">.</span>SysProcAttr<span class="token punctuation">{</span>Setpgid<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">.</span>stderr    cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">.</span>stdout    c<span class="token punctuation">.</span>command <span class="token operator">=</span> cmd    <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    errChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        errChan <span class="token operator">&lt;-</span> c<span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>errChan<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// 在运行过程中三者都是阻塞的，正常情况下 errChan 会最先接通，然后返回</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> err <span class="token operator">=</span> <span class="token operator">&lt;-</span>errChan<span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>        err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"cmd run timeout, cmd [%s], time[%v]"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Cmd<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">.</span>TerminateChan<span class="token punctuation">:</span>        err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"cmd is terminated, cmd [%s]"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">Stderr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>stderr<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">Stdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>Setpgid <span class="token punctuation">{</span>        <span class="token keyword">return</span> syscall<span class="token punctuation">.</span><span class="token function">Kill</span><span class="token punctuation">(</span><span class="token operator">-</span>c<span class="token punctuation">.</span>command<span class="token punctuation">.</span>Process<span class="token punctuation">.</span>Pid<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGKILL<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> syscall<span class="token punctuation">.</span><span class="token function">Kill</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>command<span class="token punctuation">.</span>Process<span class="token punctuation">.</span>Pid<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGKILL<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何用-go-进行加密"><a href="#如何用-go-进行加密" class="headerlink" title="如何用 go 进行加密"></a>如何用 go 进行加密</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> goaes<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"crypto/aes"</span>    <span class="token string">"crypto/cipher"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"errors"</span>    <span class="token string">"io"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Encrypt</span><span class="token punctuation">(</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> text <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    msg <span class="token operator">:=</span> <span class="token function">pad</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    ciphertext <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> aes<span class="token punctuation">.</span>BlockSize<span class="token operator">+</span><span class="token function">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>    iv <span class="token operator">:=</span> ciphertext<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadFull</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    cfb <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCFBEncrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    cfb<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Decrypt</span><span class="token punctuation">(</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> text <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    block<span class="token punctuation">,</span> err <span class="token operator">:=</span> aes<span class="token punctuation">.</span><span class="token function">NewCipher</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">%</span> aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"blocksize must be multipe of decoded message length"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    iv <span class="token operator">:=</span> text<span class="token punctuation">[</span><span class="token punctuation">:</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">]</span>    msg <span class="token operator">:=</span> text<span class="token punctuation">[</span>aes<span class="token punctuation">.</span>BlockSize<span class="token punctuation">:</span><span class="token punctuation">]</span>    cfb <span class="token operator">:=</span> cipher<span class="token punctuation">.</span><span class="token function">NewCFBDecrypter</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    cfb<span class="token punctuation">.</span><span class="token function">XORKeyStream</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    unpadMsg<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">unpad</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> unpadMsg<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">pad</span><span class="token punctuation">(</span>src <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    padding <span class="token operator">:=</span> aes<span class="token punctuation">.</span>BlockSize <span class="token operator">-</span> <span class="token function">len</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token operator">%</span>aes<span class="token punctuation">.</span>BlockSize    padtext <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Repeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token function">byte</span><span class="token punctuation">(</span>padding<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> padding<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">append</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> padtext<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">unpad</span><span class="token punctuation">(</span>src <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>    unpadding <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>src<span class="token punctuation">[</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> unpadding <span class="token operator">></span> length <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unpad error. This could happen when incorrect encryption key is used"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> src<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">(</span>length <span class="token operator">-</span> unpadding<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【main】</title>
      <link href="/2019/10/22/Go/syncd/mail/"/>
      <url>/2019/10/22/Go/syncd/mail/</url>
      
        <content type="html"><![CDATA[<h2 id="sendmail-go"><a href="#sendmail-go" class="headerlink" title="sendmail.go"></a>sendmail.go</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Copyright 2019 syncd Author. All Rights Reserved.</span><span class="token comment" spellcheck="true">// Use of this source code is governed by a MIT-style</span><span class="token comment" spellcheck="true">// license that can be found in the LICENSE file.</span><span class="token keyword">package</span> syncd<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"strings"</span>    <span class="token string">"gopkg.in/gomail.v2"</span><span class="token punctuation">)</span><span class="token keyword">type</span> SendMail <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Enable  <span class="token builtin">int</span>    Smtp    <span class="token builtin">string</span>    Port    <span class="token builtin">int</span>    User    <span class="token builtin">string</span>    Pass    <span class="token builtin">string</span>    dialer  <span class="token operator">*</span>gomail<span class="token punctuation">.</span>Dialer<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 核心，使用配置的 smtp, port, user, pass 来获得一个可发邮件的 dialer</span><span class="token keyword">func</span> <span class="token function">NewSendMail</span><span class="token punctuation">(</span>mail <span class="token operator">*</span>SendMail<span class="token punctuation">)</span> <span class="token operator">*</span>SendMail <span class="token punctuation">{</span>    mail<span class="token punctuation">.</span>dialer <span class="token operator">=</span> gomail<span class="token punctuation">.</span><span class="token function">NewPlainDialer</span><span class="token punctuation">(</span>mail<span class="token punctuation">.</span>Smtp<span class="token punctuation">,</span> mail<span class="token punctuation">.</span>Port<span class="token punctuation">,</span> mail<span class="token punctuation">.</span>User<span class="token punctuation">,</span> mail<span class="token punctuation">.</span>Pass<span class="token punctuation">)</span>    <span class="token keyword">return</span> mail<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mail <span class="token operator">*</span>SendMail<span class="token punctuation">)</span> <span class="token function">send</span><span class="token punctuation">(</span>msg <span class="token operator">*</span>SendMailMessage<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> mail<span class="token punctuation">.</span>Enable <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    msg<span class="token punctuation">.</span>mail <span class="token operator">=</span> mail    m <span class="token operator">:=</span> msg<span class="token punctuation">.</span><span class="token function">NewMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> mail<span class="token punctuation">.</span>dialer<span class="token punctuation">.</span><span class="token function">DialAndSend</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mail <span class="token operator">*</span>SendMail<span class="token punctuation">)</span> <span class="token function">Send</span><span class="token punctuation">(</span>msg <span class="token operator">*</span>SendMailMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> mail<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>            <span class="token string">"send mail failed, to[%s], cc[%s], subject[%s]"</span><span class="token punctuation">,</span>             strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>To<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Cc<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            msg<span class="token punctuation">.</span>Subject<span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>mail <span class="token operator">*</span>SendMail<span class="token punctuation">)</span> <span class="token function">AsyncSend</span><span class="token punctuation">(</span>msg <span class="token operator">*</span>SendMailMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">go</span> mail<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> SendMailMessage <span class="token keyword">struct</span> <span class="token punctuation">{</span>    From    <span class="token builtin">string</span>    To      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    Cc      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    Subject <span class="token builtin">string</span>    Body    <span class="token builtin">string</span>    Attach  <span class="token builtin">string</span>    mail    <span class="token operator">*</span>SendMail<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>SendMailMessage<span class="token punctuation">)</span> <span class="token function">NewMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gomail<span class="token punctuation">.</span>Message <span class="token punctuation">{</span>    mailMsg <span class="token operator">:=</span> gomail<span class="token punctuation">.</span><span class="token function">NewMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> m<span class="token punctuation">.</span>From <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>        mailMsg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"From"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>User<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        mailMsg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"From"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>From<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    mailMsg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"To"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>To<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Cc<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        mailMsg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Cc"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Cc<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    mailMsg<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Subject"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Subject<span class="token punctuation">)</span>    mailMsg<span class="token punctuation">.</span><span class="token function">SetBody</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    <span class="token keyword">if</span> m<span class="token punctuation">.</span>Attach <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        mailMsg<span class="token punctuation">.</span><span class="token function">Attach</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>Attach<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> mailMsg<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【install】</title>
      <link href="/2019/10/22/Go/syncd/install/"/>
      <url>/2019/10/22/Go/syncd/install/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bash# shell 变量syncd_remote_repo=https://github.com/dreamans/syncd.gitsyncd_repo_path=$HOME/.syncd-repo# $0 shell 本身的文件名, install_path 是 sh 文件所在目录的下一级 syncd-deploysyncd_install_path=$( cd `dirname $0`; pwd )/syncd-deploycheckCommand() {    # type go -> go is /usr/local/bin/go    type $1 > /dev/null 2>&1    # $? 为显示命令运行后的退出状态 0 表示没有错误    # -ne 是否不相等    if [ $? -ne 0 ]; then        echo "error: $1 must be installed"        echo "install exit"        exit 1    fi}# 确保这三个命令都是可运行的checkCommand "go"checkCommand "git"checkCommand "make"if [ -d ${syncd_install_path} ];then    syncd_install_path=${syncd_install_path}-$( date +%Y%m%d%H%M%S )fi# 清空路径并 git clonerm -fr ${syncd_repo_path}git clone ${syncd_remote_repo} ${syncd_repo_path}# makecd ${syncd_repo_path}make# 把打包好的文件 cp 到目标路径rm -fr ${syncd_install_path}cp -r ${syncd_repo_path}/output ${syncd_install_path}rm -fr ${syncd_repo_path}cat << EOFInstalling Syncd Path:  ${syncd_install_path}Install complete.EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
            <tag> sh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【render】</title>
      <link href="/2019/10/22/Go/syncd/render/"/>
      <url>/2019/10/22/Go/syncd/render/</url>
      
        <content type="html"><![CDATA[<h2 id="render-go"><a href="#render-go" class="headerlink" title="render.go"></a>render.go</h2><p>所有的返回值都是通过这一层来完成，这样就抽象出来一个中间层</p><p>实现了规范化和标准化，非常适合 rest</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Copyright 2019 syncd Author. All Rights Reserved.</span><span class="token comment" spellcheck="true">// Use of this source code is governed by a MIT-style</span><span class="token comment" spellcheck="true">// license that can be found in the LICENSE file.</span><span class="token keyword">package</span> render<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"net/http"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    CODE_OK <span class="token operator">=</span> <span class="token number">0</span>    CODE_ERR_SYSTEM <span class="token operator">=</span> <span class="token number">1000</span>    CODE_ERR_APP <span class="token operator">=</span> <span class="token number">1001</span>    CODE_ERR_PARAM <span class="token operator">=</span> <span class="token number">1002</span>    CODE_ERR_DATA_REPEAT <span class="token operator">=</span> <span class="token number">1003</span>    CODE_ERR_LOGIN_FAILED <span class="token operator">=</span> <span class="token number">1004</span>    CODE_ERR_NO_LOGIN <span class="token operator">=</span> <span class="token number">1005</span>    CODE_ERR_NO_PRIV <span class="token operator">=</span> <span class="token number">1006</span>    CODE_ERR_TASK_ERROR <span class="token operator">=</span> <span class="token number">1007</span>    CODE_ERR_USER_OR_PASS_WRONG <span class="token operator">=</span> <span class="token number">1008</span>    CODE_ERR_NO_DATA <span class="token operator">=</span> <span class="token number">1009</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">JSON</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> CODE_OK<span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>        <span class="token string">"data"</span><span class="token punctuation">:</span> data<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CustomerError</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> code <span class="token builtin">int</span><span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> code<span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">RepeatError</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> CODE_ERR_DATA_REPEAT<span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NoDataError</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> CODE_ERR_NO_DATA<span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">ParamError</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> CODE_ERR_PARAM<span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AppError</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> CODE_ERR_APP<span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Success</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>        <span class="token string">"code"</span><span class="token punctuation">:</span> CODE_OK<span class="token punctuation">,</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【model】</title>
      <link href="/2019/10/22/Go/syncd/model/"/>
      <url>/2019/10/22/Go/syncd/model/</url>
      
        <content type="html"><![CDATA[<h2 id="核心-crud-gt-model-go"><a href="#核心-crud-gt-model-go" class="headerlink" title="核心 crud -&gt; model.go"></a>核心 crud -&gt; model.go</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 单个 field 的查询条件</span><span class="token keyword">type</span> WhereParam <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Field   <span class="token builtin">string</span>    Tag     <span class="token builtin">string</span>    Prepare <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对一次查询条件的总描述</span><span class="token keyword">type</span> QueryParam <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Fields     <span class="token builtin">string</span>    Offset     <span class="token builtin">int</span>    Limit      <span class="token builtin">int</span>    Order      <span class="token builtin">string</span>    Where      <span class="token punctuation">[</span><span class="token punctuation">]</span>WhereParam<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 统一的建表 api</span><span class="token keyword">func</span> <span class="token function">Create</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql execute error: %s, sql [%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetMulti</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> query QueryParam<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Offset</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>Offset<span class="token punctuation">)</span>    <span class="token keyword">if</span> query<span class="token punctuation">.</span>Limit <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>Limit<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> query<span class="token punctuation">.</span>Fields <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>Fields<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> query<span class="token punctuation">.</span>Order <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Order</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>Order<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    db <span class="token operator">=</span> <span class="token function">parseWhereParam</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> query<span class="token punctuation">.</span>Where<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 把条件都组装好了后开始 find</span>    db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s, sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Count</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> count <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> query QueryParam<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    db <span class="token operator">=</span> <span class="token function">parseWhereParam</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> query<span class="token punctuation">.</span>Where<span class="token punctuation">)</span>    db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s, sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Delete</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> query QueryParam<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>Where<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: delete failed, where conditions cannot be empty"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    db <span class="token operator">=</span> <span class="token function">parseWhereParam</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> query<span class="token punctuation">.</span>Where<span class="token punctuation">)</span>    db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s, sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">DeleteByPk</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s, sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetOne</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> query QueryParam<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">if</span> query<span class="token punctuation">.</span>Fields <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>Fields<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    db <span class="token operator">=</span> <span class="token function">parseWhereParam</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> query<span class="token punctuation">.</span>Where<span class="token punctuation">)</span>    db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>db<span class="token punctuation">.</span><span class="token function">RecordNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s, sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">GetByPk</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> id <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>db<span class="token punctuation">.</span><span class="token function">RecordNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">UpdateByPk</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s, sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Update</span><span class="token punctuation">(</span>model <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> query QueryParam<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    db <span class="token operator">:=</span> syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>DB<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    db <span class="token operator">=</span> <span class="token function">parseWhereParam</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> query<span class="token punctuation">.</span>Where<span class="token punctuation">)</span>    db <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        syncd<span class="token punctuation">.</span>App<span class="token punctuation">.</span>Logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span><span class="token string">"mysql query error: %s, sql[%v]"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">QueryExpr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把所有 param 组装一个 single sql</span><span class="token keyword">func</span> <span class="token function">parseWhereParam</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> where <span class="token punctuation">[</span><span class="token punctuation">]</span>WhereParam<span class="token punctuation">)</span> <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>where<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> db    <span class="token punctuation">}</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        plain <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>        prepare <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> w <span class="token operator">:=</span> <span class="token keyword">range</span> where <span class="token punctuation">{</span>        tag <span class="token operator">:=</span> w<span class="token punctuation">.</span>Tag        <span class="token keyword">if</span> tag <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>            tag <span class="token operator">=</span> <span class="token string">"="</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> plainFmt <span class="token builtin">string</span>        <span class="token keyword">switch</span> tag <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"IN"</span><span class="token punctuation">:</span>            plainFmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s IN (?)"</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>Field<span class="token punctuation">)</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            plainFmt <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s %s ?"</span><span class="token punctuation">,</span> w<span class="token punctuation">.</span>Field<span class="token punctuation">,</span> tag<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        plain <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>plain<span class="token punctuation">,</span> plainFmt<span class="token punctuation">)</span>        prepare <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>prepare<span class="token punctuation">,</span> w<span class="token punctuation">.</span>Prepare<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>plain<span class="token punctuation">,</span> <span class="token string">" AND "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prepare<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>包括三个表：</p><ul><li>user(user 的基本信息)</li><li>user_role(user 的权限信息)</li><li>user_token(user 的认证信息)</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// user.go</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID              <span class="token builtin">int</span>         <span class="token string">`gorm:"primary_key"`</span>    RoleId          <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span>    Username        <span class="token builtin">string</span>      <span class="token string">`gorm:"type:varchar(20);not null;default:''"`</span>    Password        <span class="token builtin">string</span>      <span class="token string">`gorm:"type:char(32);not null;default:''"`</span>    Salt            <span class="token builtin">string</span>      <span class="token string">`gorm:"type:char(10);not null;default:''"`</span>    Truename        <span class="token builtin">string</span>      <span class="token string">`gorm:"type:varchar(20);not null;default:''"`</span>    Mobile          <span class="token builtin">string</span>      <span class="token string">`gorm:"type:varchar(20);not null;default:''"`</span>    Email           <span class="token builtin">string</span>      <span class="token string">`gorm:"type:varchar(500);not null;default:''"`</span>    Status          <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span>    LastLoginTime   <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span>    LastLoginIp     <span class="token builtin">string</span>      <span class="token string">`gorm:"type:varchar(50);not null;default:''"`</span>    Ctime           <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"syd_user"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    m<span class="token punctuation">.</span>Ctime <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">Create</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">UpdateByFields</span><span class="token punctuation">(</span>data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> query QueryParam<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Update</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> data<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">List</span><span class="token punctuation">(</span>query QueryParam<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span>User    ok <span class="token operator">:=</span> <span class="token function">GetMulti</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span>query QueryParam<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> count <span class="token builtin">int</span>    ok <span class="token operator">:=</span> <span class="token function">Count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>count<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    <span class="token keyword">return</span> count<span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">DeleteByPk</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">GetByPk</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">GetOne</span><span class="token punctuation">(</span>query QueryParam<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">GetOne</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// user_role.go</span><span class="token keyword">type</span> UserRole <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID          <span class="token builtin">int</span>         <span class="token string">`gorm:"primary_key"`</span>    Name        <span class="token builtin">string</span>      <span class="token string">`gorm:"type:varchar(100);not null;default:''"`</span>    Privilege   <span class="token builtin">string</span>        <span class="token string">`gorm:"type:varchar(2000);not null;default:''"`</span>    Ctime       <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// user_token.go</span><span class="token keyword">type</span> UserToken <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID              <span class="token builtin">int</span>         <span class="token string">`gorm:"primary_key"`</span>    UserId          <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span>    Token           <span class="token builtin">string</span>      <span class="token string">`gorm:"type:varchar(100);not null;default:''"`</span>    Expire          <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span>    Ctime           <span class="token builtin">int</span>         <span class="token string">`gorm:"type:int(11);not null;default:0"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余 model 略</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【deploy】</title>
      <link href="/2019/10/21/Go/syncd/deploy/"/>
      <url>/2019/10/21/Go/syncd/deploy/</url>
      
        <content type="html"><![CDATA[<h2 id="deploy-描述"><a href="#deploy-描述" class="headerlink" title="deploy 描述"></a>deploy 描述</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Deploy <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID              <span class="token builtin">int</span>    User            <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 部署前运行命令</span>    PreCmd          <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 部署后运行命令</span>    PostCmd         <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 部署路径</span>    DeployPath      <span class="token builtin">string</span>    DeployTmpPath   <span class="token builtin">string</span>    PackFile        <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 部署到的服务器描述（可以包括多台->分布式）</span>    <span class="token comment" spellcheck="true">// 每个服务器描述都包含一个 task 描述</span>    srvs            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Server    status          <span class="token builtin">int</span>    <span class="token comment" spellcheck="true">// 每个服务器开始部署前 +1, defer wg.Done(), 利用这个可以同步部署状态</span>    wg              sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">}</span><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID              <span class="token builtin">int</span>    Addr            <span class="token builtin">string</span>    User            <span class="token builtin">string</span>    Port            <span class="token builtin">int</span>    PreCmd          <span class="token builtin">string</span>    PostCmd         <span class="token builtin">string</span>    Key             <span class="token builtin">string</span>    PackFile        <span class="token builtin">string</span>    DeployTmpPath   <span class="token builtin">string</span>    DeployPath      <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 每个 server 都有一个 task 要执行</span>    task            <span class="token operator">*</span>command<span class="token punctuation">.</span>Task    result          <span class="token operator">*</span>ServerResult<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【gorm-&gt;mysql】</title>
      <link href="/2019/10/21/Go/syncd/db/"/>
      <url>/2019/10/21/Go/syncd/db/</url>
      
        <content type="html"><![CDATA[<h2 id="项目数据库连接-handler"><a href="#项目数据库连接-handler" class="headerlink" title="项目数据库连接 handler"></a>项目数据库连接 handler</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> syncd<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"errors"</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span>    <span class="token comment" spellcheck="true">// gorm 需要使用的 mysql 驱动</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>    <span class="token string">"github.com/jinzhu/gorm"</span><span class="token punctuation">)</span><span class="token keyword">type</span> DB <span class="token keyword">struct</span> <span class="token punctuation">{</span>    DbHandler   <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB    cfg         <span class="token operator">*</span>DbConfig<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewDatabase</span><span class="token punctuation">(</span>cfg <span class="token operator">*</span>DbConfig<span class="token punctuation">)</span> <span class="token operator">*</span>DB <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 总配置分出来的数据库配置，复制到这里初始化</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>DB<span class="token punctuation">{</span>        cfg<span class="token punctuation">:</span> cfg<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    c<span class="token punctuation">,</span> err <span class="token operator">:=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span><span class="token function">parseConnConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"mysql connect failed, %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span><span class="token function">LogMode</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>MaxIdleConns<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>MaxOpenConns<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>ConnMaxLifeTime<span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>DbHandler <span class="token operator">=</span> c    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    db<span class="token punctuation">.</span>DbHandler<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">parseConnConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> connHost <span class="token builtin">string</span>    <span class="token keyword">if</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Unix <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        connHost <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"unix(%s)"</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Unix<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        connHost <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"tcp(%s:%d)"</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Host<span class="token punctuation">,</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Port<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%s@%s/%s?charset=%s&amp;parseTime=True&amp;loc=Local"</span><span class="token punctuation">,</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>User<span class="token punctuation">,</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Pass<span class="token punctuation">,</span> connHost<span class="token punctuation">,</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>DbName<span class="token punctuation">,</span> db<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Charset<span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【config】</title>
      <link href="/2019/10/20/Go/syncd/config/"/>
      <url>/2019/10/20/Go/syncd/config/</url>
      
        <content type="html"><![CDATA[<h2 id="项目配置描述-config-go"><a href="#项目配置描述-config-go" class="headerlink" title="项目配置描述 config.go"></a>项目配置描述 config.go</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 总配置->子配置: 这样写利于开发</span>    Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Serve   <span class="token operator">*</span>ServeConfig        Db      <span class="token operator">*</span>DbConfig        Log     <span class="token operator">*</span>LogConfig        Syncd   <span class="token operator">*</span>SyncdConfig        Mail    <span class="token operator">*</span>MailConfig    <span class="token punctuation">}</span>    SyncdConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>        LocalSpace      <span class="token builtin">string</span>        RemoteSpace     <span class="token builtin">string</span>        Cipher          <span class="token builtin">string</span>        AppHost         <span class="token builtin">string</span>    <span class="token punctuation">}</span>    LogConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Path    <span class="token builtin">string</span>    <span class="token punctuation">}</span>    MailConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Enable  <span class="token builtin">int</span>        Smtp    <span class="token builtin">string</span>        Port    <span class="token builtin">int</span>        User    <span class="token builtin">string</span>        Pass    <span class="token builtin">string</span>    <span class="token punctuation">}</span>    ServeConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Addr            <span class="token builtin">string</span>        FeServeEnable   <span class="token builtin">int</span>        ReadTimeout     <span class="token builtin">int</span>        WriteTimeout    <span class="token builtin">int</span>        IdleTimeout     <span class="token builtin">int</span>    <span class="token punctuation">}</span>    DbConfig <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Unix            <span class="token builtin">string</span>        Host            <span class="token builtin">string</span>        Port            <span class="token builtin">int</span>        Charset         <span class="token builtin">string</span>        User            <span class="token builtin">string</span>        Pass            <span class="token builtin">string</span>        DbName          <span class="token builtin">string</span>        TablePrefix     <span class="token builtin">string</span>        MaxIdleConns    <span class="token builtin">int</span>        MaxOpenConns    <span class="token builtin">int</span>        ConnMaxLifeTime <span class="token builtin">int</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="读配置"><a href="#读配置" class="headerlink" title="读配置"></a>读配置</h2><h3 id="1-定义全局-configFile-结构"><a href="#1-定义全局-configFile-结构" class="headerlink" title="1 定义全局 configFile 结构"></a>1 定义全局 configFile 结构</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"github.com/Unknwon/goconfig"</span><span class="token keyword">var</span> configFile <span class="token operator">*</span>goconfig<span class="token punctuation">.</span>ConfigFile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-加载配置文件"><a href="#2-加载配置文件" class="headerlink" title="2 加载配置文件"></a>2 加载配置文件</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">initCfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// 配置文件路径（这一步是为了检查路径，如果有错直接 crash）</span>    syncdIni <span class="token operator">:=</span> <span class="token function">findSyncdIniFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用函数完成加载</span>    configFile<span class="token punctuation">,</span> err <span class="token operator">=</span> goconfig<span class="token punctuation">.</span><span class="token function">LoadConfigFile</span><span class="token punctuation">(</span>syncdIni<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"load config file failed, %s\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">outputInfo</span><span class="token punctuation">(</span><span class="token string">"Config Loaded"</span><span class="token punctuation">,</span> syncdIni<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// goconfig 包的加载函数</span><span class="token keyword">func</span> <span class="token function">LoadConfigFile</span><span class="token punctuation">(</span>fileName <span class="token builtin">string</span><span class="token punctuation">,</span> moreFiles <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>ConfigFile<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Append files' name together.</span>    fileNames <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>moreFiles<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    fileNames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> fileName    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>moreFiles<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        fileNames <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fileNames<span class="token punctuation">,</span> moreFiles<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c <span class="token operator">=</span> <span class="token function">newConfigFile</span><span class="token punctuation">(</span>fileNames<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> fileNames <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-从文件取配置并赋值给配置描述结构体"><a href="#3-从文件取配置并赋值给配置描述结构体" class="headerlink" title="3 从文件取配置并赋值给配置描述结构体"></a>3 从文件取配置并赋值给配置描述结构体</h3><pre class="line-numbers language-go"><code class="language-go">cfg <span class="token operator">:=</span> <span class="token operator">&amp;</span>syncd<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>        Serve<span class="token punctuation">:</span> <span class="token operator">&amp;</span>syncd<span class="token punctuation">.</span>ServeConfig<span class="token punctuation">{</span>            Addr<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"serve"</span><span class="token punctuation">,</span> <span class="token string">"addr"</span><span class="token punctuation">,</span> <span class="token string">"8868"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            FeServeEnable<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"serve"</span><span class="token punctuation">,</span> <span class="token string">"fe_serve_enable"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ReadTimeout<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"serve"</span><span class="token punctuation">,</span> <span class="token string">"read_timeout"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            WriteTimeout<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"serve"</span><span class="token punctuation">,</span> <span class="token string">"write_timeout"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            IdleTimeout<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"serve"</span><span class="token punctuation">,</span> <span class="token string">"idle_timeout"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Db<span class="token punctuation">:</span> <span class="token operator">&amp;</span>syncd<span class="token punctuation">.</span>DbConfig<span class="token punctuation">{</span>            Unix<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"unix"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Host<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"host"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Port<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">3306</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Charset<span class="token punctuation">:</span> <span class="token string">"utf8mb4"</span><span class="token punctuation">,</span>            User<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Pass<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            DbName<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"dbname"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxIdleConns<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"max_idle_conns"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxOpenConns<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"max_open_conns"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ConnMaxLifeTime<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"database"</span><span class="token punctuation">,</span> <span class="token string">"conn_max_life_time"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Log<span class="token punctuation">:</span> <span class="token operator">&amp;</span>syncd<span class="token punctuation">.</span>LogConfig<span class="token punctuation">{</span>            Path<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">,</span> <span class="token string">"path"</span><span class="token punctuation">,</span> <span class="token string">"stdout"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Syncd<span class="token punctuation">:</span> <span class="token operator">&amp;</span>syncd<span class="token punctuation">.</span>SyncdConfig<span class="token punctuation">{</span>            LocalSpace<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"syncd"</span><span class="token punctuation">,</span> <span class="token string">"local_space"</span><span class="token punctuation">,</span> <span class="token string">"~/.syncd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            RemoteSpace<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"syncd"</span><span class="token punctuation">,</span> <span class="token string">"remote_space"</span><span class="token punctuation">,</span> <span class="token string">"~/.syncd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Cipher<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"syncd"</span><span class="token punctuation">,</span> <span class="token string">"cipher_key"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            AppHost<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"syncd"</span><span class="token punctuation">,</span> <span class="token string">"app_host"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Mail<span class="token punctuation">:</span> <span class="token operator">&amp;</span>syncd<span class="token punctuation">.</span>MailConfig<span class="token punctuation">{</span>            Enable<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">,</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Smtp<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">,</span> <span class="token string">"smtp_host"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Port<span class="token punctuation">:</span> <span class="token function">configIntOrDefault</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">,</span> <span class="token string">"smtp_port"</span><span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            User<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">,</span> <span class="token string">"smtp_user"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Pass<span class="token punctuation">:</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">,</span> <span class="token string">"smtp_pass"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// User: configOrDefault("database", "user", "")</span><span class="token keyword">func</span> <span class="token function">configOrDefault</span><span class="token punctuation">(</span>section<span class="token punctuation">,</span> key<span class="token punctuation">,</span> useDefault <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> configFile<span class="token punctuation">.</span><span class="token function">GetValue</span><span class="token punctuation">(</span>section<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> useDefault    <span class="token punctuation">}</span>    <span class="token keyword">return</span> val<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目配置文件-syncd-ini"><a href="#项目配置文件-syncd-ini" class="headerlink" title="项目配置文件 syncd.ini"></a>项目配置文件 syncd.ini</h2><p>[] 表示 section<br>格式：<code>key = value</code></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[syncd]</span><span class="token comment" spellcheck="true">; 项目访问域名, 结尾不要加 `/`</span><span class="token constant">app_host</span> <span class="token attr-value"><span class="token punctuation">=</span> http://localhost:8878</span><span class="token comment" spellcheck="true">; 工作空间</span><span class="token constant">local_space</span> <span class="token attr-value"><span class="token punctuation">=</span> /tmp/syncd_data</span><span class="token comment" spellcheck="true">; 远端机器工作空间</span><span class="token constant">remote_space</span> <span class="token attr-value"><span class="token punctuation">=</span> ~/.syncd</span><span class="token comment" spellcheck="true">; AES加密/解密使用的私钥</span><span class="token comment" spellcheck="true">; 秘钥需要进行base64编码</span><span class="token comment" spellcheck="true">; 16 => AES-128, 24 => AES-192, 32 => AES-256</span><span class="token constant">cipher_key</span> <span class="token attr-value"><span class="token punctuation">=</span> pG1L62EM0cPIIOwusQsbcV8Cs6j/M1RxLoXIZylWUC4=</span><span class="token selector">[serve]</span><span class="token comment" spellcheck="true">; HTTP服务监听的端口</span><span class="token constant">addr</span> <span class="token attr-value"><span class="token punctuation">=</span> :8878</span><span class="token comment" spellcheck="true">; 是否开启前端资源服务</span><span class="token comment" spellcheck="true">; 开启后Syncd前端资源将不再依赖nginx等web服务</span><span class="token comment" spellcheck="true">; 1 - 开启</span><span class="token comment" spellcheck="true">; 0 - 关闭</span><span class="token constant">fe_serve_enable</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span class="token comment" spellcheck="true">; 读超时时间设置, 单位秒</span><span class="token constant">read_timeout</span> <span class="token attr-value"><span class="token punctuation">=</span> 300</span><span class="token comment" spellcheck="true">; 写超时时间设置, 单位秒</span><span class="token constant">write_timeout</span> <span class="token attr-value"><span class="token punctuation">=</span> 300</span><span class="token comment" spellcheck="true">; 空闲连接超时设置, 单位秒</span><span class="token constant">idle_timeout</span> <span class="token attr-value"><span class="token punctuation">=</span> 300</span><span class="token selector">[database]</span><span class="token comment" spellcheck="true">; 数据库连接信息</span><span class="token comment" spellcheck="true">; 必须是utf8mb4编码</span><span class="token comment" spellcheck="true">;unix = </span><span class="token comment" spellcheck="true">;max_idle_conns = 100</span><span class="token comment" spellcheck="true">;max_open_conns = 200</span><span class="token comment" spellcheck="true">;conn_max_life_time = 500</span><span class="token constant">host</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> root</span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span> 123456</span><span class="token constant">dbname</span> <span class="token attr-value"><span class="token punctuation">=</span> syncd</span><span class="token selector">[log]</span><span class="token comment" spellcheck="true">; 日志输出路径</span><span class="token comment" spellcheck="true">; path = stdout - 打印到标准输出</span><span class="token comment" spellcheck="true">; path = /path/file - 输出到文件</span><span class="token constant">path</span> <span class="token attr-value"><span class="token punctuation">=</span> stdout</span><span class="token selector">[mail]</span><span class="token comment" spellcheck="true">; 是否开启邮件发送功能</span><span class="token comment" spellcheck="true">; 0 - 关闭</span><span class="token comment" spellcheck="true">; 1 - 开启</span><span class="token constant">enable</span> <span class="token attr-value"><span class="token punctuation">=</span> 0</span><span class="token comment" spellcheck="true">; 邮件smtp配置</span><span class="token constant">smtp_host</span> <span class="token attr-value"><span class="token punctuation">=</span> smtp.exmail.qq.com</span><span class="token constant">smtp_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 465</span><span class="token constant">smtp_user</span> <span class="token attr-value"><span class="token punctuation">=</span> </span><span class="token constant">smtp_pass</span> <span class="token attr-value"><span class="token punctuation">=</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【build】</title>
      <link href="/2019/10/20/Go/syncd/build/"/>
      <url>/2019/10/20/Go/syncd/build/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 总的打包描述</span><span class="token keyword">type</span> Build <span class="token keyword">struct</span> <span class="token punctuation">{</span>    repo        <span class="token operator">*</span>Repo    local       <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// tmp 路径</span>    tmp         <span class="token builtin">string</span>    packFile    <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 临时 .sh 脚本的名字，是一个随机生成的字符串</span>    scriptFile  <span class="token builtin">string</span>    task        <span class="token operator">*</span>command<span class="token punctuation">.</span>Task    result      <span class="token operator">*</span>Result<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代码仓库描述</span><span class="token keyword">type</span> Repo <span class="token keyword">struct</span> <span class="token punctuation">{</span>    url     <span class="token builtin">string</span>    branch  <span class="token builtin">string</span>    commit  <span class="token builtin">string</span>    local   <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打包任务描述</span><span class="token keyword">type</span> Task <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Commands    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    done        <span class="token builtin">bool</span>    timeout     <span class="token builtin">int</span>    termChan    <span class="token keyword">chan</span> <span class="token builtin">int</span>    err         <span class="token builtin">error</span>    result      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>TaskResult<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 打包结果描述</span><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>    err     <span class="token builtin">error</span>    status  <span class="token builtin">int</span>    stime   <span class="token builtin">int</span>    etime   <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="1-NewBuild"><a href="#1-NewBuild" class="headerlink" title="1 NewBuild"></a>1 NewBuild</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewBuild</span><span class="token punctuation">(</span>repo <span class="token operator">*</span>Repo<span class="token punctuation">,</span> local<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> packFile<span class="token punctuation">,</span> scripts <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Build<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    build <span class="token operator">:=</span> <span class="token operator">&amp;</span>Build<span class="token punctuation">{</span>        repo<span class="token punctuation">:</span> repo<span class="token punctuation">,</span>        local<span class="token punctuation">:</span> local<span class="token punctuation">,</span>        tmp<span class="token punctuation">:</span> tmp<span class="token punctuation">,</span>        packFile<span class="token punctuation">:</span> packFile<span class="token punctuation">,</span>        result<span class="token punctuation">:</span> <span class="token operator">&amp;</span>Result<span class="token punctuation">{</span>            status<span class="token punctuation">:</span> STATUS_INIT<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据初始化脚本新建项目相关的脚本文件 .sh</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> build<span class="token punctuation">.</span><span class="token function">createScriptFile</span><span class="token punctuation">(</span>scripts<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> build<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    build<span class="token punctuation">.</span><span class="token function">initBuildTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> build<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化打包 task</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Build<span class="token punctuation">)</span> <span class="token function">initBuildTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fetch 的 cmds</span>    cmds <span class="token operator">:=</span> b<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token function">Fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    cmds <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>cmds<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>        <span class="token string">"echo \"Now is\" `date`"</span><span class="token punctuation">,</span>        <span class="token string">"echo \"Run user is\" `whoami`"</span><span class="token punctuation">,</span>        fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"rm -f %s"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>packFile<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 核心 cmd, 运行事先定义好的脚本文件</span>        fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"/bin/bash -c %s"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>scriptFile<span class="token punctuation">)</span><span class="token punctuation">,</span>        fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"rm -f %s"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>scriptFile<span class="token punctuation">)</span><span class="token punctuation">,</span>        fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"rm -fr %s"</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>local<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"echo \"Compile completed\" `date`"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 完成赋值</span>    b<span class="token punctuation">.</span>task <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">NewTask</span><span class="token punctuation">(</span>cmds<span class="token punctuation">,</span> COMMAND_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Run"><a href="#2-Run" class="headerlink" title="2 Run"></a>2 Run</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Build<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span>result<span class="token punctuation">.</span>status <span class="token operator">=</span> STATUS_ING    b<span class="token punctuation">.</span>result<span class="token punctuation">.</span>stime <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>task<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> b<span class="token punctuation">.</span>task<span class="token punctuation">.</span><span class="token function">GetError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>result<span class="token punctuation">.</span>status <span class="token operator">=</span> STATUS_FAILED        b<span class="token punctuation">.</span>result<span class="token punctuation">.</span>err <span class="token operator">=</span> err    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        b<span class="token punctuation">.</span>result<span class="token punctuation">.</span>status <span class="token operator">=</span> STATUS_DONE    <span class="token punctuation">}</span>    b<span class="token punctuation">.</span>result<span class="token punctuation">.</span>etime <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// task.Run()</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Task<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 逐个执行 cmd</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cmd <span class="token operator">:=</span> <span class="token keyword">range</span> t<span class="token punctuation">.</span>Commands <span class="token punctuation">{</span>        result<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>result<span class="token punctuation">,</span> result<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span>err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"task run failed, "</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    t<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Terminate"><a href="#3-Terminate" class="headerlink" title="3 Terminate"></a>3 Terminate</h3><p>util/command 的 Run()</p><p>通过定义一个 chan 结合 select 来完成随时终止执行的操作</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Command <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Cmd             <span class="token builtin">string</span>    Timeout         time<span class="token punctuation">.</span>Duration    <span class="token comment" spellcheck="true">// 需要终止时 &lt;- 即可</span>    TerminateChan   <span class="token keyword">chan</span> <span class="token builtin">int</span>    Setpgid         <span class="token builtin">bool</span>    command         <span class="token operator">*</span>exec<span class="token punctuation">.</span>Cmd    stdout          bytes<span class="token punctuation">.</span>Buffer    stderr          bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Command<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    errChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 用另一个 goroutine 执行具体 cmd</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        errChan <span class="token operator">&lt;-</span> c<span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>errChan<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> err <span class="token builtin">error</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> err <span class="token operator">=</span> <span class="token operator">&lt;-</span>errChan<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">// cmd 完成了或者发生了错误</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">// 超时</span>        err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"cmd run timeout, cmd [%s], time[%v]"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Cmd<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">.</span>TerminateChan<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// 用户终止</span>        err <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"cmd is terminated, cmd [%s]"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【makefile】</title>
      <link href="/2019/10/19/Go/syncd/makefile/"/>
      <url>/2019/10/19/Go/syncd/makefile/</url>
      
        <content type="html"><![CDATA[<h2 id="本项目的-makefile"><a href="#本项目的-makefile" class="headerlink" title="本项目的 makefile"></a>本项目的 makefile</h2><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token comment" spellcheck="true"># 定义常量</span>GO_CMD<span class="token operator">=</span>goSYNCD_BIN<span class="token operator">=</span>syncd_binSYNCD_BIN_PATH<span class="token operator">=</span>./output/binSYNCD_ETC_PATH<span class="token operator">=</span>./output/etcSYNCD_PUBLIC_PATH<span class="token operator">=</span>./output/publicSYNCD_LOG_PATH<span class="token operator">=</span>./output/logSYNCD_RES_PATH<span class="token operator">=</span>./output/resource<span class="token comment" spellcheck="true"># make 默认执行</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span> all<span class="token symbol">all</span><span class="token punctuation">:</span> clean build install<span class="token comment" spellcheck="true"># make linux</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span> linux<span class="token symbol">linux</span><span class="token punctuation">:</span> clean build-linux install<span class="token comment" spellcheck="true"># 默认编译</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span> build<span class="token symbol">build</span><span class="token punctuation">:</span>    <span class="token operator">@</span>echo <span class="token string">"build syncd start >>>"</span>    <span class="token comment" spellcheck="true"># 指定代理以及拉取依赖</span>    GOPROXY<span class="token operator">=</span>https<span class="token punctuation">:</span>//goproxy.io <span class="token variable">$</span><span class="token punctuation">(</span>GO_CMD<span class="token punctuation">)</span> mod tidy    <span class="token comment" spellcheck="true"># 根据 main.go 编译出 SYNCD_BIN</span>    <span class="token variable">$</span><span class="token punctuation">(</span>GO_CMD<span class="token punctuation">)</span> build -o <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_BIN<span class="token punctuation">)</span> ./syncd/main.go    <span class="token operator">@</span>echo <span class="token string">">>> build syncd complete"</span><span class="token comment" spellcheck="true"># 打包（主要是处理静态文件、配置文件）</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span> install<span class="token symbol">install</span><span class="token punctuation">:</span>    <span class="token operator">@</span>echo <span class="token string">"install syncd start >>>"</span>    mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_BIN_PATH<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将编译好的 SYNCD_BIN 移动到目录并重命名为 syncd</span>    mv <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_BIN<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_BIN_PATH<span class="token punctuation">)</span>/syncd    mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_ETC_PATH<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 移动配置文件</span>    cp ./syncd.ini <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_ETC_PATH<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 复制静态文件到指定目录</span>    cp -r ./public <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_PUBLIC_PATH<span class="token punctuation">)</span>    mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_LOG_PATH<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 复制资源文件到指定目录</span>    cp -r ./resource <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_RES_PATH<span class="token punctuation">)</span>    <span class="token operator">@</span>echo <span class="token string">">>> install syncd complete"</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span> clean<span class="token symbol">clean</span><span class="token punctuation">:</span>    <span class="token operator">@</span>echo <span class="token string">"clean start >>>"</span>    rm -fr ./output    rm -f <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_BIN<span class="token punctuation">)</span>    <span class="token operator">@</span>echo <span class="token string">">>> clean complete"</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span> build-linux<span class="token symbol">build-linux</span><span class="token punctuation">:</span>    <span class="token operator">@</span>echo <span class="token string">"build-linux start >>>"</span>    CGO_ENABLED<span class="token operator">=</span>0 GOOS<span class="token operator">=</span>linux GOARCH<span class="token operator">=</span>amd64 <span class="token variable">$</span><span class="token punctuation">(</span>GO_CMD<span class="token punctuation">)</span> build -o <span class="token variable">$</span><span class="token punctuation">(</span>SYNCD_BIN<span class="token punctuation">)</span> ./syncd/main.go    <span class="token operator">@</span>echo <span class="token string">">>> build-linux complete"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="学习-MakeFile"><a href="#学习-MakeFile" class="headerlink" title="学习 MakeFile"></a>学习 MakeFile</h2><p>参考 <a href="https://seisman.github.io/how-to-write-makefile/introduction.html" target="_blank" rel="noopener">https://seisman.github.io/how-to-write-makefile/introduction.html</a></p><h3 id="MakeFile-的规则"><a href="#MakeFile-的规则" class="headerlink" title="MakeFile 的规则"></a>MakeFile 的规则</h3><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">target ... </span><span class="token punctuation">:</span> prerequisites ...    command    ...    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p>可以是一个 object file（目标文件），也可以是一个执行文件，还可以是一个标签（label）</p><h4 id="prerequisites"><a href="#prerequisites" class="headerlink" title="prerequisites"></a>prerequisites</h4><p>生成该 target 所依赖的文件</p><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>该 target 要执行的命令（任意的shell命令）</p><blockquote><p>核心概念：prerequisites 中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行。</p></blockquote><h4 id="伪目标-PHONY"><a href="#伪目标-PHONY" class="headerlink" title="伪目标 .PHONY"></a>伪目标 .PHONY</h4><p>除了第一个目标是默认执行，其他标记了伪目标的需要指定才会执行，不生成目标文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码云端部署框架 syncd 学习笔记【dockerfile】</title>
      <link href="/2019/10/19/Go/syncd/dockerfile/"/>
      <url>/2019/10/19/Go/syncd/dockerfile/</url>
      
        <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>参考：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></p><p>通过编写 Dockerfile 同名文件，用户可在当前目录执行 <code>docker build</code> 来生成镜像</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>命令通过 dockerfile 和上下文进行编译，上下文是文件的集合，通过指定文件系统路径或者 url（如 git 仓库） 可以确定包含的文件</p><p>上下文是递归处理的，对于文件系统路径，会递归包含子目录，对于 url, 会递归包含依赖模块</p><p>例子：对 pwd 进行编译</p><pre class="line-numbers language-sh"><code class="language-sh">$ docker build .Sending build context to Docker daemon  6.51 MB...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：由于 build 是通过 daemon 执行，在启动的时候会将 context 发送到 daemon 进程，所以一般在空目录下放 Dockerfile 以及必须的文件进行编译，这样会提升性能</p><p>如果一定要放在项目中编译，可以使用 <code>.dockerignore</code> 来忽略多余内容</p><pre><code># comment*/temp**/*/temp*temp?</code></pre><p>例子：通过任意 path 的 Dockerfile build, 使用参数 <code>&quot;-f&quot;</code></p><pre><code>$ docker build -f /path/to/a/Dockerfile .</code></pre><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre><code># CommentINSTRUCTION arguments</code></pre><p>A Dockerfile must start with a <code>FROM</code> instruction</p><h3 id="ENV-环境替换"><a href="#ENV-环境替换" class="headerlink" title="ENV 环境替换"></a>ENV 环境替换</h3><p>例子：通过 ${foo} 代替 /bar</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM busyboxENV foo /barWORKDIR ${foo}   # WORKDIR /barADD . $foo       # ADD . /barCOPY \$foo /quux # COPY $foo /quux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="FROM-指定-base-image"><a href="#FROM-指定-base-image" class="headerlink" title="FROM 指定 base image"></a>FROM 指定 base image</h3><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM <image>[:<tag>] [AS <name>]# 在 FROM 前定义参数 ARGARG  CODE_VERSION=latestFROM base:${CODE_VERSION}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>The RUN instruction will execute any commands in a new layer on top of the current image and <code>commit the results</code>.</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">RUN /bin/bash -c 'source $HOME/.bashrc# or  RUN ["/bin/bash", "-c", "echo hello"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>三种形式：</p><ul><li><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> (exec form, this is the preferred form)</li><li><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> (as default parameters to ENTRYPOINT)</li><li><code>CMD command param1 param2</code> (shell form)</li></ul><p>一个 Dockerfile 只用有一个 CMD 起作用，如果写了多个，只有最后一个会起作用</p><p>If you would like your container to run the same executable every time, then you should consider using <code>ENTRYPOINT</code> in combination with <code>CMD</code>.</p><p>docker run 指定执行命令会覆盖 CMD</p><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><p>略</p><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">EXPOSE <port> [<port>/<protocol>...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>By default, EXPOSE assumes TCP. You can also specify UDP:</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">EXPOSE 80/udp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To expose on both TCP and UDP, include two lines:</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">EXPOSE 80/tcpEXPOSE 80/udp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>docker run -p 80:80/tcp -p 80:80/udp ...</code></pre><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>The ADD instruction copies new files, directories or remote file URLs from <code>&lt;src&gt;</code> and adds them to the filesystem of the image at the path <code>&lt;dest&gt;</code>.</p><p>两种形式:</p><ul><li><code>ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</code></li><li><code>ADD [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code> (this form is required for paths containing whitespace)</li></ul><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">ADD hom* /mydir/        # adds all files starting with "hom"ADD hom?.txt /mydir/    # ? is replaced with any single character, e.g., "home.txt"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>跟 ADD 差不多</p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>ENTRYPOINT has two forms:</p><ul><li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> (exec form, preferred)</li><li><code>ENTRYPOINT command param1 param2</code> (shell form)</li></ul><p>An ENTRYPOINT allows you to configure a container that will run as an <code>executable</code>.</p><p>For example, the following will start nginx with its default content, listening on port 80:</p><pre><code>docker run -i -t --rm -p 80:80 nginx</code></pre><p>Command line arguments to docker run <code>&lt;image&gt;</code> will be appended after all elements in an exec form ENTRYPOINT, and will override all elements specified using CMD. This allows arguments to be passed to the entry point, i.e., docker run <code>&lt;image&gt;</code> -d will pass the -d argument to the entry point. You can override the ENTRYPOINT instruction using the docker run –entrypoint flag.</p><p>The shell form prevents any CMD or run command line arguments from being used, but has the disadvantage that your ENTRYPOINT will be started as a subcommand of /bin/sh -c, which does not pass signals. This means that the executable will not be the container’s PID 1 - and will not receive Unix signals - so your executable will not receive a SIGTERM from docker stop <code>&lt;container&gt;</code>.</p><p>有多个 ENTRYPOINT 时，最后一个 ENTRYPOINT 才会发挥作用</p><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><pre><code>VOLUME [&quot;/data&quot;]</code></pre><p>The VOLUME instruction creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers. The value can be a JSON array, VOLUME [“/var/log/“], or a plain string with multiple arguments, such as VOLUME /var/log or VOLUME /var/log /var/db.</p><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>TODO</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>TODO</p><h2 id="本项目-Dockerfile"><a href="#本项目-Dockerfile" class="headerlink" title="本项目 Dockerfile"></a>本项目 Dockerfile</h2><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># 第一个镜像：完成项目的 makeFROM golang:1.12-alpine3.10 AS buildCOPY . /usr/local/srcWORKDIR /usr/local/srcRUN apk --no-cache add build-base && make# 第二个镜像：使用第一个镜像的编译结果启动服务FROM alpine:3.10WORKDIR /syncdCOPY --from=build /usr/local/src/output /syncdEXPOSE 8878CMD [ "/syncd/bin/syncd" ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> Go </tag>
            
            <tag> syncd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 命令行参数文档</title>
      <link href="/2019/10/18/Docker/docker-cmd/"/>
      <url>/2019/10/18/Docker/docker-cmd/</url>
      
        <content type="html"><![CDATA[<h2 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h2><p><a href="https://www.infoq.cn/article/KBTRC719-r6GHOPS3Cr8" target="_blank" rel="noopener">https://www.infoq.cn/article/KBTRC719-r6GHOPS3Cr8</a><br><a href="https://www.w3xue.com/manual/docker/" target="_blank" rel="noopener">https://www.w3xue.com/manual/docker/</a></p><h2 id="常用-Docker-命令列表"><a href="#常用-Docker-命令列表" class="headerlink" title="常用 Docker 命令列表"></a>常用 Docker 命令列表</h2><pre><code>docker help—检查最新 Docker 可用命令；docker attach—将本地输入、输出、错误流附加到正在运行的容器；docker commit—从当前更改的容器状态创建新镜像；docker exec—在活动或正在运行的容器中运行命令；docker history—显示镜像历史记录；docker info—显示系统范围信息；docker inspect—查找有关 docker 容器和镜像的系统级信息；docker login—登录到本地注册表或 Docker Hub；docker pull—从本地注册表或 Docker Hub 中提取镜像或存储库；docker ps—列出容器的各种属性；docker restart—停止并启动容器；docker rm—移除容器；docker rmi—删除镜像；docker run—在隔离容器中运行命令；docker search—在 Docker Hub 中搜索镜像；docker start—启动已停止的容器；docker stop—停止运行容器；docker version—提供 docker 版本信息。</code></pre><h2 id="一览表"><a href="#一览表" class="headerlink" title="一览表"></a>一览表</h2><pre><code>容器生命周期管理命令    run    start/stop/restart    kill    rm    pause/unpause    create    exec容器操作命令    ps    inspect    top    attach    events    logs    wait    export    port容器rootfs命令    commit    cp    diff镜像仓库命令    login    pull    push    search本地镜像管理命令    images    rmi    tag    build    history    save    importinfo|version命令    info    version</code></pre><h2 id="docker-run-详解"><a href="#docker-run-详解" class="headerlink" title="docker run 详解"></a>docker run 详解</h2><blockquote><p>创建一个新的容器并运行一个命令</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></pre><h3 id="OPTIONS说明："><a href="#OPTIONS说明：" class="headerlink" title="OPTIONS说明："></a>OPTIONS说明：</h3><pre><code>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；--name=&quot;nginx-lb&quot;: 为容器指定一个名称；--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；-h &quot;mars&quot;: 指定容器的hostname；-e username=&quot;ritchie&quot;: 设置环境变量；--env-file=[]: 从指定文件读入环境变量；--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；-m :设置容器使用内存最大值；--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；--link=[]: 添加链接到另一个容器；--expose=[]: 开放一个端口或一组端口；-v: 映射目录</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。docker run --name mynginx -d nginx:latest使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。docker run -P -d nginx:latest使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。docker run -p 80:80 -v /data:/data -d nginx:latest使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。w3xue@w3xue:~$ docker run -it nginx:latest /bin/bashroot@b8573233d675:/# </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终于跟头条正式签约，秋招结束:)</title>
      <link href="/2019/10/18/Daily/2019-10/18(%E4%B8%8E%E5%A4%B4%E6%9D%A1%E7%AD%BE%E7%BA%A6)/"/>
      <url>/2019/10/18/Daily/2019-10/18(%E4%B8%8E%E5%A4%B4%E6%9D%A1%E7%AD%BE%E7%BA%A6)/</url>
      
        <content type="html"><![CDATA[<p>从六月份到现在，总体上处在一个比较失衡的状态，体重重新回到 140…</p><p>放下对起薪、公司发展前景的无谓思考，快刀斩乱麻直接与头条签约，从此以后专注于个人技术的稳步提升，有多大能力拿多少💰。💰不够就跑路，多简单的逻辑呀^_^.</p><p>接下来就让我好好锻炼身体，好好学学技术、好好准备毕业吧，享受最后的校园时光。</p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 docker 的一些例子</title>
      <link href="/2019/10/18/Docker/Docker-examples/"/>
      <url>/2019/10/18/Docker/Docker-examples/</url>
      
        <content type="html"><![CDATA[<h2 id="本地安装-portainerUI"><a href="#本地安装-portainerUI" class="headerlink" title="本地安装 portainerUI"></a>本地安装 portainerUI</h2><pre><code>docker volume create portainer_datadocker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</code></pre><h2 id="本地运行-mysql-docker-服务"><a href="#本地运行-mysql-docker-服务" class="headerlink" title="本地运行 mysql docker 服务"></a>本地运行 mysql docker 服务</h2><pre><code>mkdir {anypath}/mysqldocker run -d -p 3306:3306 --restart always --privileged=true --name my_mysql -e MYSQL_ROOT_PASSWORD=123456 -v={anypath}/mysql:/mysql/data mysql</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 go mod 作为包管理工具</title>
      <link href="/2019/10/16/Go/go-mod/"/>
      <url>/2019/10/16/Go/go-mod/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="修改代理为头条的-goproxy"><a href="#修改代理为头条的-goproxy" class="headerlink" title="修改代理为头条的 goproxy"></a>修改代理为头条的 goproxy</h3><p>可以加快速度，并解决部分（似乎有一些还是不行）包被墙的问题</p><pre><code>vim ~/.bash_profile// 添加一行export GOPROXY=&quot;https://goproxy.io&quot;:wqsource ~/.bash_profile</code></pre><h3 id="使用-goland-新建项目选择-vgo"><a href="#使用-goland-新建项目选择-vgo" class="headerlink" title="使用 goland 新建项目选择 vgo"></a>使用 goland 新建项目选择 vgo</h3><p>会自动创建 go.mod</p><p>写代码，然后 go mod tidy 即可</p><h3 id="现有项目迁移"><a href="#现有项目迁移" class="headerlink" title="现有项目迁移"></a>现有项目迁移</h3><p>如果是现有项目，需要执行 go init 生成 go.mod，然后 go mod tidy</p><h3 id="golang-开头的包使用-github-replace"><a href="#golang-开头的包使用-github-replace" class="headerlink" title="golang 开头的包使用 github replace"></a>golang 开头的包使用 github replace</h3><p>需要手动修改 go.mod 文件规则</p><pre><code>replace (    golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a =&gt; github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a)或者replace golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a =&gt; github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a</code></pre><blockquote><p>注：mod 的包下载路径在：$GOPATH/pkg/mod/ 下面</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 单元测试模板 testing 使用</title>
      <link href="/2019/10/16/Go/go-testing/"/>
      <url>/2019/10/16/Go/go-testing/</url>
      
        <content type="html"><![CDATA[<h2 id="基本逻辑"><a href="#基本逻辑" class="headerlink" title="基本逻辑"></a>基本逻辑</h2><p>使用 testing 包，定义测试函数，参数为 <code>t *testing.T</code>，通过 <code>t.Run()</code>传入函数和参数执行，通过 <code>t.Errorf()</code> 来抛出错误</p><h3 id="测试多个-case"><a href="#测试多个-case" class="headerlink" title="测试多个 case"></a>测试多个 case</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> test<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/dreamans/syncd/util/gostring"</span>    <span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestJoinStrings</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span> args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>        name    <span class="token builtin">string</span>  <span class="token comment" spellcheck="true">// 用例名字</span>        args    args    <span class="token comment" spellcheck="true">// 传给被测函数的参数</span>        want    <span class="token builtin">string</span>  <span class="token comment" spellcheck="true">// 预期返回结果</span>        wantErr <span class="token builtin">bool</span>    <span class="token comment" spellcheck="true">// 用bool方便判断是否返回error，如果类型改为error反而不好判断</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token string">"case 0"</span><span class="token punctuation">,</span> args<span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"case 1"</span><span class="token punctuation">,</span> args<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"case_2"</span><span class="token punctuation">,</span> args<span class="token punctuation">{</span><span class="token string">" a"</span><span class="token punctuation">,</span> <span class="token string">"b "</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">" ab "</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>            got <span class="token operator">:=</span> gostring<span class="token punctuation">.</span><span class="token function">JoinStrings</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>args<span class="token operator">...</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> got <span class="token operator">!=</span> tt<span class="token punctuation">.</span>want <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Division() = %v, want %v"</span><span class="token punctuation">,</span> got<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>want<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="压力测试与计时示例"><a href="#压力测试与计时示例" class="headerlink" title="压力测试与计时示例"></a>压力测试与计时示例</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Benchmark_JoinStrings</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// use b.N for looping</span>        gostring<span class="token punctuation">.</span><span class="token function">JoinStrings</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Benchmark_TimeConsumingFunction</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    b<span class="token punctuation">.</span><span class="token function">StopTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用该函数停止压力测试的时间计数</span>    <span class="token comment" spellcheck="true">// 此处做一些初始化的工作,例如读取文件数据,数据库连接之类的,</span>    <span class="token comment" spellcheck="true">// 这样这些时间不影响我们测试函数本身的性能</span>    b<span class="token punctuation">.</span><span class="token function">StartTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 重新开始时间</span>    b<span class="token punctuation">.</span>N<span class="token operator">=</span><span class="token number">1234</span> <span class="token comment" spellcheck="true">// 自定义执行1234次</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        gostring<span class="token punctuation">.</span><span class="token function">JoinStrings</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 运行结束后会自动打印出时间</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
